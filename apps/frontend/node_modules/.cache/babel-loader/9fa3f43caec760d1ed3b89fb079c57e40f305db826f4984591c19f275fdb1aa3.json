{"ast":null,"code":"const API_BASE = \"http://localhost:5001/api\"; // your backend URL\n\nexport async function fetchDashboardData() {\n  try {\n    const res = await fetch(`${API_BASE}/dashboard`); // optional endpoint\n    if (!res.ok) throw new Error(\"Failed to fetch dashboard data\");\n    return await res.json();\n  } catch (err) {\n    console.error(err);\n    return null; // fallback handled in Dashboard component\n  }\n}\nexport async function requestPickup(pickupData) {\n  try {\n    const res = await fetch(`${API_BASE}/pickups`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(pickupData)\n    });\n    if (!res.ok) {\n      const errorBody = await res.json().catch(() => ({}));\n      return {\n        error: errorBody.message || \"Failed to schedule pickup\"\n      };\n    }\n    return await res.json(); // backend should return { message, data }\n  } catch (err) {\n    console.error(err);\n    return {\n      error: \"Network error. Could not reach backend.\"\n    };\n  }\n}","map":{"version":3,"names":["API_BASE","fetchDashboardData","res","fetch","ok","Error","json","err","console","error","requestPickup","pickupData","method","headers","body","JSON","stringify","errorBody","catch","message"],"sources":["C:/Users/HP/OneDrive/Documents/GitHub/EcoCollect/apps/frontend/src/services/residentApi.js"],"sourcesContent":["const API_BASE = \"http://localhost:5001/api\"; // your backend URL\r\n\r\nexport async function fetchDashboardData() {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/dashboard`); // optional endpoint\r\n    if (!res.ok) throw new Error(\"Failed to fetch dashboard data\");\r\n    return await res.json();\r\n  } catch (err) {\r\n    console.error(err);\r\n    return null; // fallback handled in Dashboard component\r\n  }\r\n}\r\n\r\nexport async function requestPickup(pickupData) {\r\n  try {\r\n    const res = await fetch(`${API_BASE}/pickups`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(pickupData),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const errorBody = await res.json().catch(() => ({}));\r\n      return { error: errorBody.message || \"Failed to schedule pickup\" };\r\n    }\r\n\r\n    return await res.json(); // backend should return { message, data }\r\n  } catch (err) {\r\n    console.error(err);\r\n    return { error: \"Network error. Could not reach backend.\" };\r\n  }\r\n}\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAG,2BAA2B,CAAC,CAAC;;AAE9C,OAAO,eAAeC,kBAAkBA,CAAA,EAAG;EACzC,IAAI;IACF,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,YAAY,CAAC,CAAC,CAAC;IAClD,IAAI,CAACE,GAAG,CAACE,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,gCAAgC,CAAC;IAC9D,OAAO,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC;EACzB,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO,IAAI,CAAC,CAAC;EACf;AACF;AAEA,OAAO,eAAeG,aAAaA,CAACC,UAAU,EAAE;EAC9C,IAAI;IACF,MAAMT,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGH,QAAQ,UAAU,EAAE;MAC7CY,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACL,UAAU;IACjC,CAAC,CAAC;IAEF,IAAI,CAACT,GAAG,CAACE,EAAE,EAAE;MACX,MAAMa,SAAS,GAAG,MAAMf,GAAG,CAACI,IAAI,CAAC,CAAC,CAACY,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MACpD,OAAO;QAAET,KAAK,EAAEQ,SAAS,CAACE,OAAO,IAAI;MAA4B,CAAC;IACpE;IAEA,OAAO,MAAMjB,GAAG,CAACI,IAAI,CAAC,CAAC,CAAC,CAAC;EAC3B,CAAC,CAAC,OAAOC,GAAG,EAAE;IACZC,OAAO,CAACC,KAAK,CAACF,GAAG,CAAC;IAClB,OAAO;MAAEE,KAAK,EAAE;IAA0C,CAAC;EAC7D;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}