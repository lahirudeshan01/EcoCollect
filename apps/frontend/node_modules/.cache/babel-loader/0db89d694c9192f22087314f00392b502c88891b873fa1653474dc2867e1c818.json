{"ast":null,"code":"// services/api.js\n\n// Backend base URL\nconst BASE_URL = \"http://localhost:5001/api\";\n\n// ------------------- Payments -------------------\n\n// Fetch all payment history\nexport async function fetchPaymentHistory() {\n  try {\n    const res = await fetch(`${BASE_URL}/payments`);\n    if (!res.ok) {\n      throw new Error(\"Failed to fetch payment history\");\n    }\n    return await res.json();\n  } catch (error) {\n    console.error(\"fetchPaymentHistory error:\", error);\n    throw error;\n  }\n}\n\n// Add a new payment\nexport async function addPayment(paymentData) {\n  try {\n    const res = await fetch(`${BASE_URL}/payments`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify(paymentData)\n    });\n    if (!res.ok) {\n      const errorData = await res.json().catch(() => ({}));\n      throw new Error(errorData.message || \"Failed to add payment\");\n    }\n    return await res.json();\n  } catch (error) {\n    console.error(\"addPayment error:\", error);\n    throw error;\n  }\n}\n\n// ------------------- Waste History -------------------\n\nexport async function fetchWasteHistory() {\n  try {\n    const token = localStorage.getItem(\"token\");\n    const res = await fetch(`${BASE_URL}/users/history`, {\n      headers: {\n        Authorization: `Bearer ${token}`,\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    if (!res.ok) throw new Error(\"Failed to fetch waste history\");\n    return await res.json();\n  } catch (error) {\n    console.error(\"fetchWasteHistory error:\", error);\n    throw error;\n  }\n}\n\n// ------------------- Authentication -------------------\n\nexport async function login(email, password) {\n  try {\n    var _data$user, _data$user2;\n    const res = await fetch(`${BASE_URL}/auth/login`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        email,\n        password\n      })\n    });\n    if (!res.ok) {\n      const err = await res.json().catch(() => ({}));\n      throw new Error(err.message || \"Login failed\");\n    }\n    const data = await res.json();\n    return {\n      token: data.token,\n      userId: (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id,\n      name: ((_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.name) || \"Resident\"\n    };\n  } catch (error) {\n    console.error(\"login error:\", error);\n    throw error;\n  }\n}\nexport async function register(name, email, password) {\n  try {\n    const res = await fetch(`${BASE_URL}/auth/register`, {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        name,\n        email,\n        password\n      })\n    });\n    if (!res.ok) {\n      const err = await res.json().catch(() => ({}));\n      throw new Error(err.message || \"Registration failed\");\n    }\n    return await res.json();\n  } catch (error) {\n    console.error(\"register error:\", error);\n    throw error;\n  }\n}","map":{"version":3,"names":["BASE_URL","fetchPaymentHistory","res","fetch","ok","Error","json","error","console","addPayment","paymentData","method","headers","body","JSON","stringify","errorData","catch","message","fetchWasteHistory","token","localStorage","getItem","Authorization","login","email","password","_data$user","_data$user2","err","data","userId","user","id","name","register"],"sources":["C:/Users/HP/OneDrive/Documents/GitHub/EcoCollect/apps/frontend/src/services/api.js"],"sourcesContent":["// services/api.js\r\n\r\n// Backend base URL\r\nconst BASE_URL = \"http://localhost:5001/api\";\r\n\r\n// ------------------- Payments -------------------\r\n\r\n// Fetch all payment history\r\nexport async function fetchPaymentHistory() {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/payments`);\r\n    if (!res.ok) {\r\n      throw new Error(\"Failed to fetch payment history\");\r\n    }\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"fetchPaymentHistory error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// Add a new payment\r\nexport async function addPayment(paymentData) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/payments`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(paymentData),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const errorData = await res.json().catch(() => ({}));\r\n      throw new Error(errorData.message || \"Failed to add payment\");\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"addPayment error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ------------------- Waste History -------------------\r\n\r\nexport async function fetchWasteHistory() {\r\n  try {\r\n    const token = localStorage.getItem(\"token\");\r\n    const res = await fetch(`${BASE_URL}/users/history`, {\r\n      headers: {\r\n        Authorization: `Bearer ${token}`,\r\n        \"Content-Type\": \"application/json\",\r\n      },\r\n    });\r\n    if (!res.ok) throw new Error(\"Failed to fetch waste history\");\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"fetchWasteHistory error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\n// ------------------- Authentication -------------------\r\n\r\nexport async function login(email, password) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/auth/login`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ email, password }),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const err = await res.json().catch(() => ({}));\r\n      throw new Error(err.message || \"Login failed\");\r\n    }\r\n\r\n    const data = await res.json();\r\n    return {\r\n      token: data.token,\r\n      userId: data.user?.id,\r\n      name: data.user?.name || \"Resident\",\r\n    };\r\n  } catch (error) {\r\n    console.error(\"login error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n\r\nexport async function register(name, email, password) {\r\n  try {\r\n    const res = await fetch(`${BASE_URL}/auth/register`, {\r\n      method: \"POST\",\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify({ name, email, password }),\r\n    });\r\n\r\n    if (!res.ok) {\r\n      const err = await res.json().catch(() => ({}));\r\n      throw new Error(err.message || \"Registration failed\");\r\n    }\r\n\r\n    return await res.json();\r\n  } catch (error) {\r\n    console.error(\"register error:\", error);\r\n    throw error;\r\n  }\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}