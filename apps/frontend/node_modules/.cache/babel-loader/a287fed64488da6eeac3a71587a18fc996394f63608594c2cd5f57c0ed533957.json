{"ast":null,"code":"import axios from 'axios';\nconst api = axios.create({\n  baseURL: 'http://localhost:5000/api'\n});\nexport default api;\n\n// Route API functions\nexport const routeAPI = {\n  // Get all routes\n  getAllRoutes: async () => {\n    try {\n      const response = await api.get('/routes');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching routes:', error);\n      throw error;\n    }\n  },\n  // Create a new route\n  createRoute: async routeData => {\n    try {\n      const response = await api.post('/routes', routeData);\n      return response.data;\n    } catch (error) {\n      console.error('Error creating route:', error);\n      throw error;\n    }\n  },\n  // Update route status (for dispatch)\n  updateRouteStatus: async (routeId, statusData) => {\n    try {\n      const response = await api.put(`/routes/${routeId}`, statusData);\n      return response.data;\n    } catch (error) {\n      console.error('Error updating route:', error);\n      throw error;\n    }\n  },\n  // Delete a route\n  deleteRoute: async routeId => {\n    try {\n      const response = await api.delete(`/routes/${routeId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error deleting route:', error);\n      throw error;\n    }\n  },\n  // Get route by ID\n  getRouteById: async routeId => {\n    try {\n      const response = await api.get(`/routes/${routeId}`);\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching route:', error);\n      throw error;\n    }\n  },\n  // Get the latest route\n  getLatestRoute: async () => {\n    try {\n      const response = await api.get('/routes/latest');\n      return response.data;\n    } catch (error) {\n      console.error('Error fetching latest route:', error);\n      throw error;\n    }\n  }\n};\n\n// Mock API functions\nexport const fetchDashboardData = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        totalWaste: 12482,\n        recyclingPercentage: 42,\n        upcomingPickups: 3,\n        recentActivity: [{\n          date: '2025-10-15',\n          description: 'Pickup completed for 15kg of waste.'\n        }, {\n          date: '2025-10-10',\n          description: 'Recycling reward of 50 points earned.'\n        }]\n      });\n    }, 500);\n  });\n};\nexport const requestPickup = async formData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simulate success\n      resolve({\n        success: true,\n        data: {\n          requiresPayment: false\n        }\n      });\n\n      // Simulate suggestion\n      // resolve({ success: false, suggestion: 'Tomorrow at 10 AM' });\n\n      // Simulate failure\n      // resolve({ success: false, message: 'Invalid address' });\n    }, 1000);\n  });\n};","map":{"version":3,"names":["axios","api","create","baseURL","routeAPI","getAllRoutes","response","get","data","error","console","createRoute","routeData","post","updateRouteStatus","routeId","statusData","put","deleteRoute","delete","getRouteById","getLatestRoute","fetchDashboardData","Promise","resolve","setTimeout","totalWaste","recyclingPercentage","upcomingPickups","recentActivity","date","description","requestPickup","formData","success","requiresPayment"],"sources":["C:/Users/lahiru deshan/Desktop/CropWise_GitHub/EcoCollect/apps/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst api = axios.create({\r\n  baseURL: 'http://localhost:5000/api',\r\n});\r\n\r\nexport default api;\r\n\r\n// Route API functions\r\nexport const routeAPI = {\r\n  // Get all routes\r\n  getAllRoutes: async () => {\r\n    try {\r\n      const response = await api.get('/routes');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching routes:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Create a new route\r\n  createRoute: async (routeData) => {\r\n    try {\r\n      const response = await api.post('/routes', routeData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error creating route:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update route status (for dispatch)\r\n  updateRouteStatus: async (routeId, statusData) => {\r\n    try {\r\n      const response = await api.put(`/routes/${routeId}`, statusData);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error updating route:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Delete a route\r\n  deleteRoute: async (routeId) => {\r\n    try {\r\n      const response = await api.delete(`/routes/${routeId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error deleting route:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get route by ID\r\n  getRouteById: async (routeId) => {\r\n    try {\r\n      const response = await api.get(`/routes/${routeId}`);\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching route:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get the latest route\r\n  getLatestRoute: async () => {\r\n    try {\r\n      const response = await api.get('/routes/latest');\r\n      return response.data;\r\n    } catch (error) {\r\n      console.error('Error fetching latest route:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};\r\n\r\n// Mock API functions\r\nexport const fetchDashboardData = async () => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          totalWaste: 12482,\r\n          recyclingPercentage: 42,\r\n          upcomingPickups: 3,\r\n          recentActivity: [\r\n            { date: '2025-10-15', description: 'Pickup completed for 15kg of waste.' },\r\n            { date: '2025-10-10', description: 'Recycling reward of 50 points earned.' },\r\n          ],\r\n        });\r\n      }, 500);\r\n    });\r\n  };\r\n  \r\n  export const requestPickup = async (formData) => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // Simulate success\r\n        resolve({ success: true, data: { requiresPayment: false } });\r\n  \r\n        // Simulate suggestion\r\n        // resolve({ success: false, suggestion: 'Tomorrow at 10 AM' });\r\n  \r\n        // Simulate failure\r\n        // resolve({ success: false, message: 'Invalid address' });\r\n      }, 1000);\r\n    });\r\n  };\r\n  "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}