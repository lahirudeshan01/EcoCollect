{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\udith\\\\OneDrive\\\\Desktop\\\\CSSE\\\\EcoCollect\\\\apps\\\\frontend\\\\src\\\\pages\\\\ScanQR.js\",\n  _s = $RefreshSig$();\nimport React, { useRef, useEffect, useState } from 'react';\nimport offline, { saveScan, syncPendingScans, initOfflineSync } from '../lib/offline';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function ScanQR() {\n  _s();\n  const videoRef = useRef(null);\n  const canvasRef = useRef(null);\n  const [message, setMessage] = useState('Initializing camera...');\n  const [scanning, setScanning] = useState(true);\n  useEffect(() => {\n    const stopSync = initOfflineSync({\n      intervalMs: 20000\n    });\n    let stream;\n    const start = async () => {\n      try {\n        stream = await navigator.mediaDevices.getUserMedia({\n          video: {\n            facingMode: 'environment'\n          },\n          audio: false\n        });\n        if (videoRef.current) {\n          videoRef.current.srcObject = stream;\n          videoRef.current.setAttribute('playsinline', true); // required to tell iOS safari we don't want fullscreen\n          await videoRef.current.play();\n          requestAnimationFrame(() => {\n            doTick();\n          });\n          setMessage('Point the camera at a QR code');\n        }\n      } catch (err) {\n        console.error(err);\n        setMessage('Camera access denied or not available');\n      }\n    };\n    const doTick = async () => {\n      if (!scanning) return;\n      const video = videoRef.current;\n      const canvas = canvasRef.current;\n      if (video && canvas) {\n        const width = video.videoWidth;\n        const height = video.videoHeight;\n        if (width === 0 || height === 0) {\n          requestAnimationFrame(() => {\n            doTick();\n          });\n          return;\n        }\n        canvas.width = width;\n        canvas.height = height;\n        const ctx = canvas.getContext('2d');\n        ctx.drawImage(video, 0, 0, width, height);\n        try {\n          const imageData = ctx.getImageData(0, 0, width, height);\n          // jsQR is expected to be available on window.jsQR via CDN\n          const code = window.jsQR ? window.jsQR(imageData.data, width, height) : null;\n          if (code) {\n            setMessage('QR detected: ' + code.data);\n            setScanning(false);\n            const payload = {\n              binId: code.data,\n              collectorId: 'web-collector',\n              timestamp: new Date().toISOString()\n            };\n            // Try to POST immediately; if fails, save offline\n            try {\n              const res = await fetch('/api/collections/scan', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json'\n                },\n                body: JSON.stringify(payload)\n              });\n              if (!res.ok) throw new Error('Network response not ok');\n              setMessage('Scan submitted');\n            } catch (err) {\n              // Save locally for later sync\n              await saveScan({\n                payload\n              });\n              setMessage('Saved offline â€” will sync when online');\n            }\n          }\n        } catch (e) {\n          // imageData may throw if canvas tainted; ignore gracefully\n        }\n      }\n      requestAnimationFrame(() => {\n        doTick();\n      });\n    };\n    start();\n    return () => {\n      setScanning(false);\n      stopSync && stopSync();\n      if (stream) {\n        stream.getTracks().forEach(t => t.stop());\n      }\n    };\n  }, [scanning]);\n\n  // Optional: UI action to force sync now\n  const handleSyncNow = async () => {\n    setMessage('Syncing pending...');\n    const r = await syncPendingScans();\n    setMessage('Synced ' + (r.synced || 0) + ' scans');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"min-h-screen bg-white flex flex-col items-center justify-start p-6\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-2xl font-semibold mb-4\",\n      children: \"Scan QR Code\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"w-full max-w-xl bg-gray-50 rounded-lg p-4 border\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"relative\",\n        style: {\n          paddingTop: '56.25%'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"video\", {\n          ref: videoRef,\n          style: {\n            position: 'absolute',\n            top: 0,\n            left: 0,\n            width: '100%',\n            height: '100%'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"canvas\", {\n          ref: canvasRef,\n          style: {\n            display: 'none'\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-4\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"text-sm text-gray-600\",\n          children: message\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-3 flex gap-3\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setScanning(true);\n              setMessage('Resuming scan...');\n            },\n            className: \"px-3 py-1 rounded bg-emerald-600 text-white\",\n            children: \"Resume\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 101,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => {\n              setScanning(false);\n              setMessage('Scan stopped');\n            },\n            className: \"px-3 py-1 rounded border\",\n            children: \"Stop\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 102,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleSyncNow,\n            className: \"px-3 py-1 rounded border\",\n            children: \"Sync Now\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 100,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 89,\n    columnNumber: 5\n  }, this);\n}\n_s(ScanQR, \"fECXpnoHQTOHn36k6/LfZm+gn9U=\");\n_c = ScanQR;\nvar _c;\n$RefreshReg$(_c, \"ScanQR\");","map":{"version":3,"names":["React","useRef","useEffect","useState","offline","saveScan","syncPendingScans","initOfflineSync","jsxDEV","_jsxDEV","ScanQR","_s","videoRef","canvasRef","message","setMessage","scanning","setScanning","stopSync","intervalMs","stream","start","navigator","mediaDevices","getUserMedia","video","facingMode","audio","current","srcObject","setAttribute","play","requestAnimationFrame","doTick","err","console","error","canvas","width","videoWidth","height","videoHeight","ctx","getContext","drawImage","imageData","getImageData","code","window","jsQR","data","payload","binId","collectorId","timestamp","Date","toISOString","res","fetch","method","headers","body","JSON","stringify","ok","Error","e","getTracks","forEach","t","stop","handleSyncNow","r","synced","className","children","fileName","_jsxFileName","lineNumber","columnNumber","style","paddingTop","ref","position","top","left","display","onClick","_c","$RefreshReg$"],"sources":["C:/Users/udith/OneDrive/Desktop/CSSE/EcoCollect/apps/frontend/src/pages/ScanQR.js"],"sourcesContent":["import React, { useRef, useEffect, useState } from 'react';\r\nimport offline, { saveScan, syncPendingScans, initOfflineSync } from '../lib/offline';\r\n\r\nexport default function ScanQR() {\r\n  const videoRef = useRef(null);\r\n  const canvasRef = useRef(null);\r\n  const [message, setMessage] = useState('Initializing camera...');\r\n  const [scanning, setScanning] = useState(true);\r\n\r\n  useEffect(() => {\r\n    const stopSync = initOfflineSync({ intervalMs: 20000 });\r\n    let stream;\r\n    const start = async () => {\r\n      try {\r\n        stream = await navigator.mediaDevices.getUserMedia({ video: { facingMode: 'environment' }, audio: false });\r\n        if (videoRef.current) {\r\n          videoRef.current.srcObject = stream;\r\n          videoRef.current.setAttribute('playsinline', true); // required to tell iOS safari we don't want fullscreen\r\n          await videoRef.current.play();\r\n          requestAnimationFrame(() => { doTick(); });\r\n          setMessage('Point the camera at a QR code');\r\n        }\r\n      } catch (err) {\r\n        console.error(err);\r\n        setMessage('Camera access denied or not available');\r\n      }\r\n    };\r\n\r\n    const doTick = async () => {\r\n      if (!scanning) return;\r\n      const video = videoRef.current;\r\n      const canvas = canvasRef.current;\r\n      if (video && canvas) {\r\n        const width = video.videoWidth;\r\n        const height = video.videoHeight;\r\n        if (width === 0 || height === 0) {\r\n          requestAnimationFrame(() => { doTick(); });\r\n          return;\r\n        }\r\n        canvas.width = width;\r\n        canvas.height = height;\r\n        const ctx = canvas.getContext('2d');\r\n        ctx.drawImage(video, 0, 0, width, height);\r\n        try {\r\n          const imageData = ctx.getImageData(0, 0, width, height);\r\n          // jsQR is expected to be available on window.jsQR via CDN\r\n          const code = window.jsQR ? window.jsQR(imageData.data, width, height) : null;\r\n          if (code) {\r\n            setMessage('QR detected: ' + code.data);\r\n            setScanning(false);\r\n            const payload = { binId: code.data, collectorId: 'web-collector', timestamp: new Date().toISOString() };\r\n            // Try to POST immediately; if fails, save offline\r\n            try {\r\n              const res = await fetch('/api/collections/scan', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(payload) });\r\n              if (!res.ok) throw new Error('Network response not ok');\r\n              setMessage('Scan submitted');\r\n            } catch (err) {\r\n              // Save locally for later sync\r\n              await saveScan({ payload });\r\n              setMessage('Saved offline â€” will sync when online');\r\n            }\r\n          }\r\n        } catch (e) {\r\n          // imageData may throw if canvas tainted; ignore gracefully\r\n        }\r\n      }\r\n      requestAnimationFrame(() => { doTick(); });\r\n    };\r\n\r\n    start();\r\n\r\n    return () => {\r\n      setScanning(false);\r\n      stopSync && stopSync();\r\n      if (stream) {\r\n        stream.getTracks().forEach((t) => t.stop());\r\n      }\r\n    };\r\n  }, [scanning]);\r\n\r\n  // Optional: UI action to force sync now\r\n  const handleSyncNow = async () => {\r\n    setMessage('Syncing pending...');\r\n    const r = await syncPendingScans();\r\n    setMessage('Synced ' + (r.synced || 0) + ' scans');\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-white flex flex-col items-center justify-start p-6\">\r\n      <h2 className=\"text-2xl font-semibold mb-4\">Scan QR Code</h2>\r\n\r\n      <div className=\"w-full max-w-xl bg-gray-50 rounded-lg p-4 border\">\r\n        <div className=\"relative\" style={{paddingTop: '56.25%'}}>\r\n          <video ref={videoRef} style={{position: 'absolute', top:0, left:0, width:'100%', height:'100%'}} />\r\n          <canvas ref={canvasRef} style={{display: 'none'}} />\r\n        </div>\r\n\r\n        <div className=\"mt-4\">\r\n          <div className=\"text-sm text-gray-600\">{message}</div>\r\n          <div className=\"mt-3 flex gap-3\">\r\n            <button onClick={() => { setScanning(true); setMessage('Resuming scan...'); }} className=\"px-3 py-1 rounded bg-emerald-600 text-white\">Resume</button>\r\n            <button onClick={() => { setScanning(false); setMessage('Scan stopped'); }} className=\"px-3 py-1 rounded border\">Stop</button>\r\n            <button onClick={handleSyncNow} className=\"px-3 py-1 rounded border\">Sync Now</button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}