{"ast":null,"code":"// Mock API functions\nexport const fetchDashboardData = async () => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve({\n        totalWaste: 12482,\n        recyclingPercentage: 42,\n        upcomingPickups: 3,\n        recentActivity: [{\n          date: '2025-10-15',\n          description: 'Pickup completed for 15kg of waste.'\n        }, {\n          date: '2025-10-10',\n          description: 'Recycling reward of 50 points earned.'\n        }]\n      });\n    }, 500);\n  });\n};\nexport const requestPickup = async formData => {\n  return new Promise(resolve => {\n    setTimeout(() => {\n      // Simulate success\n      resolve({\n        success: true,\n        data: {\n          requiresPayment: false\n        }\n      });\n\n      // Simulate suggestion\n      // resolve({ success: false, suggestion: 'Tomorrow at 10 AM' });\n\n      // Simulate failure\n      // resolve({ success: false, message: 'Invalid address' });\n    }, 1000);\n  });\n};","map":{"version":3,"names":["fetchDashboardData","Promise","resolve","setTimeout","totalWaste","recyclingPercentage","upcomingPickups","recentActivity","date","description","requestPickup","formData","success","data","requiresPayment"],"sources":["C:/Users/lahiru deshan/Desktop/CropWise_GitHub/EcoCollect/apps/frontend/src/services/api.js"],"sourcesContent":["// Mock API functions\r\nexport const fetchDashboardData = async () => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        resolve({\r\n          totalWaste: 12482,\r\n          recyclingPercentage: 42,\r\n          upcomingPickups: 3,\r\n          recentActivity: [\r\n            { date: '2025-10-15', description: 'Pickup completed for 15kg of waste.' },\r\n            { date: '2025-10-10', description: 'Recycling reward of 50 points earned.' },\r\n          ],\r\n        });\r\n      }, 500);\r\n    });\r\n  };\r\n  \r\n  export const requestPickup = async (formData) => {\r\n    return new Promise(resolve => {\r\n      setTimeout(() => {\r\n        // Simulate success\r\n        resolve({ success: true, data: { requiresPayment: false } });\r\n  \r\n        // Simulate suggestion\r\n        // resolve({ success: false, suggestion: 'Tomorrow at 10 AM' });\r\n  \r\n        // Simulate failure\r\n        // resolve({ success: false, message: 'Invalid address' });\r\n      }, 1000);\r\n    });\r\n  };\r\n  "],"mappings":"AAAA;AACA,OAAO,MAAMA,kBAAkB,GAAG,MAAAA,CAAA,KAAY;EAC1C,OAAO,IAAIC,OAAO,CAACC,OAAO,IAAI;IAC5BC,UAAU,CAAC,MAAM;MACfD,OAAO,CAAC;QACNE,UAAU,EAAE,KAAK;QACjBC,mBAAmB,EAAE,EAAE;QACvBC,eAAe,EAAE,CAAC;QAClBC,cAAc,EAAE,CACd;UAAEC,IAAI,EAAE,YAAY;UAAEC,WAAW,EAAE;QAAsC,CAAC,EAC1E;UAAED,IAAI,EAAE,YAAY;UAAEC,WAAW,EAAE;QAAwC,CAAC;MAEhF,CAAC,CAAC;IACJ,CAAC,EAAE,GAAG,CAAC;EACT,CAAC,CAAC;AACJ,CAAC;AAED,OAAO,MAAMC,aAAa,GAAG,MAAOC,QAAQ,IAAK;EAC/C,OAAO,IAAIV,OAAO,CAACC,OAAO,IAAI;IAC5BC,UAAU,CAAC,MAAM;MACf;MACAD,OAAO,CAAC;QAAEU,OAAO,EAAE,IAAI;QAAEC,IAAI,EAAE;UAAEC,eAAe,EAAE;QAAM;MAAE,CAAC,CAAC;;MAE5D;MACA;;MAEA;MACA;IACF,CAAC,EAAE,IAAI,CAAC;EACV,CAAC,CAAC;AACJ,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}