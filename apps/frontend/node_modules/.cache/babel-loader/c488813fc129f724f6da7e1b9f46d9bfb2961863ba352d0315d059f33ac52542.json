{"ast":null,"code":"// Mock fetchWasteHistory function for history page\nexport async function fetchWasteHistory() {\n  // Simulate API call delay and return mock data\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([{\n        date: '2025-10-01',\n        type: 'Regular',\n        weight: 5.2,\n        status: 'Completed'\n      }, {\n        date: '2025-10-08',\n        type: 'Bulky',\n        weight: 12.0,\n        status: 'Completed'\n      }, {\n        date: '2025-10-15',\n        type: 'Hazardous',\n        weight: 2.5,\n        status: 'Scheduled'\n      }]);\n    }, 500);\n  });\n}\n// Mock login function for authentication\nexport async function login(email, password) {\n  // Simulate API call delay\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (email === 'resident@test.com' && password === '12345') {\n        resolve({\n          token: 'mock-token-123',\n          userId: '1',\n          name: 'Resident User'\n        });\n      } else {\n        reject(new Error('Invalid credentials'));\n      }\n    }, 500);\n  });\n}","map":{"version":3,"names":["fetchWasteHistory","Promise","resolve","setTimeout","date","type","weight","status","login","email","password","reject","token","userId","name","Error"],"sources":["C:/Users/HP/OneDrive/Documents/GitHub/EcoCollect/apps/frontend/src/services/api.js"],"sourcesContent":["// Mock fetchWasteHistory function for history page\r\nexport async function fetchWasteHistory() {\r\n    // Simulate API call delay and return mock data\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve([\r\n                { date: '2025-10-01', type: 'Regular', weight: 5.2, status: 'Completed' },\r\n                { date: '2025-10-08', type: 'Bulky', weight: 12.0, status: 'Completed' },\r\n                { date: '2025-10-15', type: 'Hazardous', weight: 2.5, status: 'Scheduled' }\r\n            ]);\r\n        }, 500);\r\n    });\r\n}\r\n// Mock login function for authentication\r\nexport async function login(email, password) {\r\n    // Simulate API call delay\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(() => {\r\n            if (email === 'resident@test.com' && password === '12345') {\r\n                resolve({\r\n                    token: 'mock-token-123',\r\n                    userId: '1',\r\n                    name: 'Resident User'\r\n                });\r\n            } else {\r\n                reject(new Error('Invalid credentials'));\r\n            }\r\n        }, 500);\r\n    });\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,iBAAiBA,CAAA,EAAG;EACtC;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC5BC,UAAU,CAAC,MAAM;MACbD,OAAO,CAAC,CACJ;QAAEE,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAY,CAAC,EACzE;QAAEH,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,OAAO;QAAEC,MAAM,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAY,CAAC,EACxE;QAAEH,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,WAAW;QAAEC,MAAM,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAY,CAAC,CAC9E,CAAC;IACN,CAAC,EAAE,GAAG,CAAC;EACX,CAAC,CAAC;AACN;AACA;AACA,OAAO,eAAeC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EACzC;EACA,OAAO,IAAIT,OAAO,CAAC,CAACC,OAAO,EAAES,MAAM,KAAK;IACpCR,UAAU,CAAC,MAAM;MACb,IAAIM,KAAK,KAAK,mBAAmB,IAAIC,QAAQ,KAAK,OAAO,EAAE;QACvDR,OAAO,CAAC;UACJU,KAAK,EAAE,gBAAgB;UACvBC,MAAM,EAAE,GAAG;UACXC,IAAI,EAAE;QACV,CAAC,CAAC;MACN,CAAC,MAAM;QACHH,MAAM,CAAC,IAAII,KAAK,CAAC,qBAAqB,CAAC,CAAC;MAC5C;IACJ,CAAC,EAAE,GAAG,CAAC;EACX,CAAC,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}