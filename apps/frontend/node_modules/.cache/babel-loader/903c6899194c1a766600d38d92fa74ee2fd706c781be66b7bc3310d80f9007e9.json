{"ast":null,"code":"// Mock fetchPaymentHistory function for payments page\nexport async function fetchPaymentHistory() {\n  // Simulate API call delay and return mock data\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve([{\n        date: '2025-10-01',\n        type: 'Charge',\n        amount: 15.00,\n        status: 'Paid'\n      }, {\n        date: '2025-10-08',\n        type: 'Payback',\n        amount: 5.00,\n        status: 'Credited'\n      }, {\n        date: '2025-10-15',\n        type: 'Charge',\n        amount: 20.00,\n        status: 'Pending'\n      }]);\n    }, 500);\n  });\n}\n// Real fetchWasteHistory function for history page\nexport async function fetchWasteHistory() {\n  const token = localStorage.getItem('token');\n  const res = await fetch('/api/users/history', {\n    headers: {\n      'Authorization': `Bearer ${token}`,\n      'Content-Type': 'application/json'\n    }\n  });\n  if (!res.ok) throw new Error('Failed to fetch waste history');\n  return await res.json();\n}\n// Mock login function for authentication\nexport async function login(email, password) {\n  var _data$user, _data$user2;\n  const res = await fetch('/api/auth/login', {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({\n      email,\n      password\n    })\n  });\n  if (!res.ok) {\n    const err = await res.json().catch(() => ({}));\n    throw new Error(err.message || 'Login failed');\n  }\n  const data = await res.json();\n  // Backend returns { token, user: { id, name, email, role } }\n  return {\n    token: data.token,\n    userId: (_data$user = data.user) === null || _data$user === void 0 ? void 0 : _data$user.id,\n    name: ((_data$user2 = data.user) === null || _data$user2 === void 0 ? void 0 : _data$user2.name) || 'Resident'\n  };\n}","map":{"version":3,"names":["fetchPaymentHistory","Promise","resolve","setTimeout","date","type","amount","status","fetchWasteHistory","token","localStorage","getItem","res","fetch","headers","ok","Error","json","login","email","password","_data$user","_data$user2","method","body","JSON","stringify","err","catch","message","data","userId","user","id","name"],"sources":["C:/Users/HP/OneDrive/Documents/GitHub/EcoCollect/apps/frontend/src/services/api.js"],"sourcesContent":["// Mock fetchPaymentHistory function for payments page\r\nexport async function fetchPaymentHistory() {\r\n    // Simulate API call delay and return mock data\r\n    return new Promise((resolve) => {\r\n        setTimeout(() => {\r\n            resolve([\r\n                { date: '2025-10-01', type: 'Charge', amount: 15.00, status: 'Paid' },\r\n                { date: '2025-10-08', type: 'Payback', amount: 5.00, status: 'Credited' },\r\n                { date: '2025-10-15', type: 'Charge', amount: 20.00, status: 'Pending' }\r\n            ]);\r\n        }, 500);\r\n    });\r\n}\r\n// Real fetchWasteHistory function for history page\r\nexport async function fetchWasteHistory() {\r\n    const token = localStorage.getItem('token');\r\n    const res = await fetch('/api/users/history', {\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`,\r\n            'Content-Type': 'application/json'\r\n        }\r\n    });\r\n    if (!res.ok) throw new Error('Failed to fetch waste history');\r\n    return await res.json();\r\n}\r\n// Mock login function for authentication\r\nexport async function login(email, password) {\r\n    const res = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password })\r\n    });\r\n    if (!res.ok) {\r\n        const err = await res.json().catch(() => ({}));\r\n        throw new Error(err.message || 'Login failed');\r\n    }\r\n    const data = await res.json();\r\n    // Backend returns { token, user: { id, name, email, role } }\r\n    return {\r\n        token: data.token,\r\n        userId: data.user?.id,\r\n        name: data.user?.name || 'Resident'\r\n    };\r\n}\r\n"],"mappings":"AAAA;AACA,OAAO,eAAeA,mBAAmBA,CAAA,EAAG;EACxC;EACA,OAAO,IAAIC,OAAO,CAAEC,OAAO,IAAK;IAC5BC,UAAU,CAAC,MAAM;MACbD,OAAO,CAAC,CACJ;QAAEE,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,QAAQ;QAAEC,MAAM,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAO,CAAC,EACrE;QAAEH,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,SAAS;QAAEC,MAAM,EAAE,IAAI;QAAEC,MAAM,EAAE;MAAW,CAAC,EACzE;QAAEH,IAAI,EAAE,YAAY;QAAEC,IAAI,EAAE,QAAQ;QAAEC,MAAM,EAAE,KAAK;QAAEC,MAAM,EAAE;MAAU,CAAC,CAC3E,CAAC;IACN,CAAC,EAAE,GAAG,CAAC;EACX,CAAC,CAAC;AACN;AACA;AACA,OAAO,eAAeC,iBAAiBA,CAAA,EAAG;EACtC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,GAAG,GAAG,MAAMC,KAAK,CAAC,oBAAoB,EAAE;IAC1CC,OAAO,EAAE;MACL,eAAe,EAAE,UAAUL,KAAK,EAAE;MAClC,cAAc,EAAE;IACpB;EACJ,CAAC,CAAC;EACF,IAAI,CAACG,GAAG,CAACG,EAAE,EAAE,MAAM,IAAIC,KAAK,CAAC,+BAA+B,CAAC;EAC7D,OAAO,MAAMJ,GAAG,CAACK,IAAI,CAAC,CAAC;AAC3B;AACA;AACA,OAAO,eAAeC,KAAKA,CAACC,KAAK,EAAEC,QAAQ,EAAE;EAAA,IAAAC,UAAA,EAAAC,WAAA;EACzC,MAAMV,GAAG,GAAG,MAAMC,KAAK,CAAC,iBAAiB,EAAE;IACvCU,MAAM,EAAE,MAAM;IACdT,OAAO,EAAE;MAAE,cAAc,EAAE;IAAmB,CAAC;IAC/CU,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;MAAEP,KAAK;MAAEC;IAAS,CAAC;EAC5C,CAAC,CAAC;EACF,IAAI,CAACR,GAAG,CAACG,EAAE,EAAE;IACT,MAAMY,GAAG,GAAG,MAAMf,GAAG,CAACK,IAAI,CAAC,CAAC,CAACW,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;IAC9C,MAAM,IAAIZ,KAAK,CAACW,GAAG,CAACE,OAAO,IAAI,cAAc,CAAC;EAClD;EACA,MAAMC,IAAI,GAAG,MAAMlB,GAAG,CAACK,IAAI,CAAC,CAAC;EAC7B;EACA,OAAO;IACHR,KAAK,EAAEqB,IAAI,CAACrB,KAAK;IACjBsB,MAAM,GAAAV,UAAA,GAAES,IAAI,CAACE,IAAI,cAAAX,UAAA,uBAATA,UAAA,CAAWY,EAAE;IACrBC,IAAI,EAAE,EAAAZ,WAAA,GAAAQ,IAAI,CAACE,IAAI,cAAAV,WAAA,uBAATA,WAAA,CAAWY,IAAI,KAAI;EAC7B,CAAC;AACL","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}